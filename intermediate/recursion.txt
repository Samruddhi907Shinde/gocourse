package main

import "fmt"

func main() {

	// Recurion is the process of a function calling itself.
	// It breaks down a problem into smaller subproblems of the same type until they become simple enough to solve directly.
	// base Case : where a recursive function stops calling itself and returns a value.
	// Without a base case the recursion would continue indefinitely.
	// Recursive Case : function calls itself with a smaller or simpler input to make progress toward the base case.
	// Recursive solutions can be less efficient than iterative solutions

	fmt.Println(factorial(5))
	fmt.Println(factorial(10))

	fmt.Println(sumOfDigits(9))
	fmt.Println(sumOfDigits(12))
	fmt.Println(sumOfDigits(12345))

	fmt.Println(fibonacci(5))
	fmt.Println(fibonacci(10))
	fmt.Println(fibonacci(15))

}

func factorial(n int) int {

	// Base case : factorial of 0 is 1
	if n == 0 {
		return 1
	}

	// Recursive case : factorial of n is n * factorial of (n-1)
	return n * factorial(n-1)
	// n * (n-1) * (n-2) * factorial(n-3) ... factorial(0)

}

func sumOfDigits(n int) int {
	// Base case
	if n < 10 {
		return n
	}

	return n%10 + sumOfDigits(n/10)
}

func fibonacci(n int) int {
	// Base case
	if n == 0 || n == 1 {
		return n
	}

	// recursive case
	return fibonacci(n-1) + fibonacci(n-2)

}
