package basics

import "fmt"

func main() {

	// var arrayName [size]elementType
	//blank array will be initialized to zero
	//use len() to get length of the array

	var numbers [5]int
	fmt.Println(numbers)

	numbers[4] = 20
	fmt.Println(numbers)

	numbers[0] = 9
	fmt.Println(numbers)

	fruits := [4]string{"Apple", "Banana", "Orange", "Grapes"}
	fmt.Println("Fruits array:", fruits)

	fmt.Println("Third element:", fruits[2])

	originalArray := [3]int{1, 2, 3}
	copiedArray := originalArray

	copiedArray[0] = 100

	fmt.Println("Original array: ", originalArray)
	fmt.Println("Copied array: ", copiedArray)

	for i := 0; i < len(numbers); i++ {
		fmt.Println("Element at index ", i, ":", numbers[i])
	}

	//shortcut
	for index, value := range numbers {
		fmt.Printf("Index: %d, Value: %d\n", index, value)
	}

	//more shortcut - standard industry
	for i, v := range numbers {
		fmt.Printf("Index: %d, Value: %d\n", i, v)
	}

	//_ used to discard index value
	//_(underscore) is a blank identifier - if we don't want to use one of the returned value
	for _, v := range numbers {
		fmt.Printf("Value: %d\n", v)
	}

	a, _ := someFunction()
	fmt.Println(a)

	// can assign a variable to _ temporarily to run the program
	b := 2
	_ = b

	fmt.Println("The length of numbers array is", len(numbers))

	//Comparing Arrays
	array1 := [3]int{1, 2, 3}
	array2 := [3]int{10, 2, 3}

	fmt.Println("Array1 is equal to Array2;", array1 == array2)

	//Multidimensional arrays - Matrix
	var matrix [3][3]int = [3][3]int{
		{1, 2, 3},
		{4, 5, 6},
		{7, 8, 9},
	}

	fmt.Println(matrix)

	//Pointers and addresses
	original := [3]int{1, 2, 3}
	var copied *[3]int

	//Pointing to original
	copied = &original
	copied[0] = 100

	fmt.Println("Original : ", original)
	fmt.Println("Copied : ", *copied)

}

func someFunction() (int, int) {
	return 1, 2
}
