package basics

import "fmt"

func main() {

	// Improves Readability of code as compared to if else

	// Switch statement
	// In go, in switch statement as soon as the expression matches
	// only that code will be executed and automatiaclly break out of the switch statement
	// In go, for switch statement we don't need to use break
	// fall through - to check the next switch case even if first case matches.
	//  It will check only next case and not all

	fruit := "pineapple"
	switch fruit {
	case "apple":
		fmt.Println("It's an apple")
	case "banana":
		fmt.Println("It's a banana")
	default:
		fmt.Println("Unknown Fruit!")
	}

	//Multiple Conditions
	day := "Monday"
	switch day {
	case "Monday", "Tuesday", "Wednesday", "Thrusday", "Friday":
		fmt.Println("It's a weekday.")
	case "Saturday", "Sunday":
		fmt.Println("It's a weekend.")
	default:
		fmt.Println("Invalid day.")
	}

	number := 15
	switch {
	case number < 10:
		fmt.Println("Number is less than 10")
	case number >= 10 && number < 20:
		fmt.Println("Number is between 10 and 19")
	default:
		fmt.Println("Number is 20 or more")
	}

	//fallthrough - to check next condition(only one)
	num := 2
	switch {
	case num > 1:
		fmt.Println("Greater than 1")
		fallthrough
	case num == 2:
		fmt.Println("Number is 2")
	default:
		fmt.Println("Not Two")
	}

	checkType(10)
	checkType(3.14)
	checkType("Hello")
	checkType(true)

}

//type assertion - switch on the type of an interface
//In type switch we cannot use fallthrough
func checkType(x interface{}) {
	switch x.(type) {
	case int:
		fmt.Println("It's an integer")
	case float64:
		fmt.Println("It's a float")
	case string:
		fmt.Println("It's a string")
	default:
		fmt.Println("Unknown Type")
	}
}
